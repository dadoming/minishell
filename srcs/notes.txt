https://www.megaemoji.com/generators/tarty/

https://manytools.org/hacker-tools/ascii-banner/ -> ansi shadow

https://linuxcommandlibrary.com/man/toilet -> nice thing


███╗   ███╗██╗███╗   ██╗██╗███████╗██╗  ██╗███████╗██╗     ██╗     
████╗ ████║██║████╗  ██║██║██╔════╝██║  ██║██╔════╝██║     ██║     
██╔████╔██║██║██╔██╗ ██║██║███████╗███████║█████╗  ██║     ██║     
██║╚██╔╝██║██║██║╚██╗██║██║╚════██║██╔══██║██╔══╝  ██║     ██║     
██║ ╚═╝ ██║██║██║ ╚████║██║███████║██║  ██║███████╗███████╗███████╗
╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝


Manual POSIX: < https://pubs.opengroup.org/onlinepubs/9699919799/ >

Tree Guide: < https://dev.to/oyagci/generating-a-parse-tree-from-a-shell-grammar-f1 >

Front-End Parser Visualizer: < https://vorpaljs.github.io/bash-parser-playground/ >

Bash Manual: < https://www.gnu.org/software/bash/manual/bash.html >

Readline Manual: < https://tiswww.case.edu/php/chet/readline/readline.html#Programming-with-GNU-Readline >

"Guide to write your own shell": < https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf >

Boa documentação: < https://github.com/madebypixel02/minishell >



Known BUGS:

echo "$    a" should output $    a
_____________________________________________________

It's not getting the path in correct way.

_____________________________________________________






!!!!!
TO - DO! :

> Implementar Signals para quando o Ctrl é pressionado.

> Implementar execução de processos.

> missing commands: cd, exit.



██████╗ ███████╗ █████╗ ██████╗ ██╗     ██╗███╗   ██╗███████╗
██╔══██╗██╔════╝██╔══██╗██╔══██╗██║     ██║████╗  ██║██╔════╝
██████╔╝█████╗  ███████║██║  ██║██║     ██║██╔██╗ ██║█████╗  
██╔══██╗██╔══╝  ██╔══██║██║  ██║██║     ██║██║╚██╗██║██╔══╝  
██║  ██║███████╗██║  ██║██████╔╝███████╗██║██║ ╚████║███████╗
╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝

(Estas são apenas algumas das mais importantes da biblioteca.)

< https://tiswww.case.edu/php/chet/readline/readline.html#Programming-with-GNU-Readline >

Notice how C-f moves forward a character,
while M-f moves forward a word. It is a loose 
convention that control keystrokes operate on 
characters while meta keystrokes operate on words.

Movement commands:
Ctrl-a : move back to start of line
Ctrl-b : move back one character 
Alt-b  : move back a word
Ctrl-e : move forward to end of line
Ctrl-f : move forward one character
Alt-f  : move forward a word

Deletion:
Ctrl-l : clear screen and print current line at top
Ctrl-d : erase current character 
Ctrl-h : erase back one character
Alt-r  : erase current line

Kill and Yank:
Ctrl-k : kill the text from the current position
            the end of the line
Alt-d  : kill from cursor to the end of current word,
            or if between words, to the end of the next
            word
Ctrl-w : kill from the cursor to the previous whitespace
Ctrl-y : yank the most recently killed text into cursor position
Alt-y  : rotate kill-ring, and yank the new top. only
            possible if previous command was Ctrl-y 
            or Alt-y.

History:
Ctrl-p : move up through the history list
Ctrl-n : move down through the history list
Alt-<  : move to first line in history
Alt->  : move to last line in history

██████╗  █████╗ ███████╗██╗  ██╗
██╔══██╗██╔══██╗██╔════╝██║  ██║
██████╔╝███████║███████╗███████║
██╔══██╗██╔══██║╚════██║██╔══██║
██████╔╝██║  ██║███████║██║  ██║
╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝ 

< https://www.gnu.org/software/bash/manual/bash.html >

> builtin: A command that is implemented internally by the shell itself, rather 
            than by an executable program somewhere in the file system.

> control operator: A token that performs a control function. It is a newline or 
            one of the following: ‘||’, ‘&&’, ‘&’, ‘;’, ‘;;’, ‘;&’, ‘;;&’, ‘|’, 
            ‘|&’, ‘(’, or ‘)’.

> metacharacter: A character that, when unquoted, separates words. A metacharacter 
            is a space, tab, newline, or one of the following characters: ‘|’, ‘&’, 
            ‘;’, ‘(’, ‘)’, ‘<’, or ‘>’.

> token: A sequence of characters considered a single unit by the shell. It is either
            a word or an operator.

> word: A sequence of characters treated as a unit by the shell. Words may not include 
            unquoted metacharacters.


!!!!! IMPORTANTE !!!!!

3.1.1 Shell Operation
The following is a brief description of the shell’s operation when it reads and 
    executes a command. 

Basically, the shell does the following:
> Reads its input from a file (Shell Scripts), from a string supplied as an argument
    to the -c invocation option (see Invoking Bash), or from the user’s terminal.

> Breaks the input into words and operators, obeying the quoting rules described in 
    Quoting. These tokens are separated by metacharacters. Alias expansion is performed 
    by this step (see Aliases).

> Parses the tokens into simple and compound commands (see Shell Commands).

> Performs the various shell expansions (see Shell Expansions), breaking the expanded 
    tokens into lists of filenames (see Filename Expansion) and commands and arguments.

> Performs any necessary redirections (see Redirections) and removes the redirection 
    operators and their operands from the argument list.

> Executes the command (see Executing Commands).

> Optionally waits for the command to complete and collects its exit status (see Exit Status).

                                                                                                   
██╗     ███████╗██╗  ██╗███████╗██████╗ 
██║     ██╔════╝╚██╗██╔╝██╔════╝██╔══██╗
██║     █████╗   ╚███╔╝ █████╗  ██████╔╝
██║     ██╔══╝   ██╔██╗ ██╔══╝  ██╔══██╗
███████╗███████╗██╔╝ ██╗███████╗██║  ██║
╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝


3.1.2.2 Single Quotes:
    Enclosing characters in single quotes (‘'’) preserves the literal value of each 
        character within the quotes. !A single quote may not occur between single 
        quotes, even when preceded by a backslash.!

3.1.2.3 Double Quotes
    Enclosing characters in double quotes (‘"’) preserves the literal value of all 
        characters within the quotes, with the exception of ‘$’, ‘`’, ‘\’, and, when 
        history expansion is enabled, ‘!’. When the shell is in POSIX mode (see Bash 
        POSIX Mode), the ‘!’ has no special meaning within double quotes, even when 
        history expansion is enabled. The characters ‘$’ and ‘`’ retain their special 
        meaning within double quotes (see Shell Expansions). The backslash retains its
        special meaning only when followed by one of the following characters: ‘$’, ‘`’,
        ‘"’, ‘\’, or newline. Within double quotes, backslashes that are followed by one
        of these characters are removed. Backslashes preceding characters without a special
        meaning are left unmodified. A double quote may be quoted within double quotes by 
        preceding it with a backslash. If enabled, history expansion will be performed unless 
        an ‘!’ appearing in double quotes is escaped using a backslash. The backslash 
        preceding the ‘!’ is not removed.

    The special parameters ‘*’ and ‘@’ have special meaning when in double quotes (see
        Shell Parameter Expansion).

                                                                           
                                                                                                   
Different input to be parsed:
-> ' '		Single quotes
-> " "		Double Quotes
-> <		Redirect input
-> >		Redirect output
-> <<		Should be given a delimiter, then read the input
		until a line containing the delimiter is seen.
-> |		Send output of one command to another
-> $ 		(Environment variables)
-> $?


A metacharacter is a space, tab, newline, or one of the following characters:
‘|’, ‘&’, ‘;’, ‘(’, ‘)’, ‘<’, or ‘>’.



██████╗  █████╗ ██████╗ ███████╗███████╗██████╗ 
██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝██╔══██╗
██████╔╝███████║██████╔╝███████╗█████╗  ██████╔╝
██╔═══╝ ██╔══██║██╔══██╗╚════██║██╔══╝  ██╔══██╗
██║     ██║  ██║██║  ██║███████║███████╗██║  ██║
╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝
                                                

In order to execute the commands a parser will be needed.
The parser will pick up all the tokens generated and it will
    put those that execute together side to side.

For example, 
    ls -la | grep "minishell"   

This will be separated like:
    ls -la
       |
    grep "minishell"

For this to happen it will 

A simple shell command such as:> echo a b c; consists of 
    the command itself followed by arguments, separated 
    by spaces. 
The first word generally specifies a command to be executed,
    with the rest of the words being that command’s arguments.



██████╗ ███████╗██████╗ ██╗██████╗ ███████╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗
██╔══██╗██╔════╝██╔══██╗██║██╔══██╗██╔════╝██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
██████╔╝█████╗  ██║  ██║██║██████╔╝█████╗  ██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗
██╔══██╗██╔══╝  ██║  ██║██║██╔══██╗██╔══╝  ██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║
██║  ██║███████╗██████╔╝██║██║  ██║███████╗╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║
╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝╚═╝  ╚═╝╚══════╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝

Before a command is executed, its input and output may be redirected using 
    a special notation interpreted by the shell.

The shell provides a mechanism for redirecting the standard input and output 
    of a command to a file. 
This is done by using the special characters ‘<’ and ‘>’ to redirect the 
    standard input and output, respectively. 
    
->  ‘<’ character redirects the standard input of a command to a file. 
->  ‘>’ character redirects the standard output of a command to a file.
->  ‘>>’ character appends the standard output of a command to a file.
->  ‘<<’ character redirects the standard input of a command to a file 
      until a line containing the delimiter is seen. (here_document)
->  ‘|’ character is used to send the output of one command to another.

For < and >, the file name immediately follows the character. 
    For <<, the delimiter immediately follows the characters. 
    For |, the command immediately follows the character.

For > truncate and create the file if it doesn't exist.
For >> append and create to the file if it doesn't exist.

They need to be separated maybe inserting a token at x position where
    they are and then the parser will take care of it.

To remove just check if they are the first or last character of a token
    and then remove it and insert in new node.


Bash information:

In the following descriptions, if the file descriptor number is omitted, 
    and the first character of the redirection operator is ‘<’, the 
    redirection refers to the standard input (file descriptor 0). 
    If the first character of the redirection operator is ‘>’, the 
    redirection refers to the standard output (file descriptor 1).

Bash handles several filenames specially when they are used in redirections,
    as described in the following table. If the operating system on which
    Bash is running provides these special files, bash will use them;
    otherwise it will emulate them internally with the behavior described
    below.

            /dev/fd/fd
                If fd is a valid integer, file descriptor fd is duplicated.

            /dev/stdin
                File descriptor 0 is duplicated.

            /dev/stdout
                File descriptor 1 is duplicated.

            /dev/stderr
                File descriptor 2 is duplicated.

A failure to open or create a file causes the redirection to fail. !!
Redirections using file descriptors greater than 9 should be used with care, 
    as they may conflict with file descriptors the shell uses internally.






INPUT REDIRECTION: <

Redirection of input causes the file whose name results from the 
    expansion of word to be opened for reading on file descriptor n,
    or the standard input (file descriptor 0) if n is not specified.

The general format for redirecting input is:

[n]<word

In this case:
    n is the file descriptor number.
    word is the name of the file to be opened for reading.
    It will always be the last filename, for instance:
        $ wc -l < main.c helper_print.c 
          20 helper_print.c
        $
    if !n then output no file descriptor provided.
    
